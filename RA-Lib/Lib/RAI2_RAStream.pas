unit RAI2_RAStream;

 { adapter unit - converts RAI2 calls to delphi calls }
 { automatically generated by Pas2RAI2 }

{ if compiled with errors:                                   
   - to convert variant to object use function V2O            
   - to convert object to variant use function O2V            
   - to convert variant to pointer use function V2P           
   - to convert pointer to variant use function P2V           
   - to convert set to variant use function S2V and           
     typecasting such as:                                     
       Value := S2V(byte(TFont(Args.Obj).Style))              
   - to convert variant to set use typecasting                
     and function V2S such as:                                
       TFont(Args.Obj).Style := TFontStyles(byte(V2S(Value))) 
     depending on size of set (f.e. sizeof(TFontStyles)),    
     try to use byte, word or integer types in typecasting   
   - sets with more when 32 elements can't be used in RAI2   }

interface

uses RAI2;

  procedure RegisterRAI2Adapter(RAI2Adapter: TRAI2Adapter);

implementation

uses RAStream, Classes, Graphics;


{ procedure TextSaveToStream(Stream: TStream; Text: string); }
procedure RAI2_TextSaveToStream(var Value: Variant; Args: TArgs);
begin
  TextSaveToStream(V2O(Args.Values[0]) as TStream, Args.Values[1]);
end;

{ function TextLoadFromStream(Stream: TStream): string; }
procedure RAI2_TextLoadFromStream(var Value: Variant; Args: TArgs);
begin
  Value := TextLoadFromStream(V2O(Args.Values[0]) as TStream);
end;

{ procedure StringSaveToStream(Stream: TStream; S: string); }
procedure RAI2_StringSaveToStream(var Value: Variant; Args: TArgs);
begin
  StringSaveToStream(V2O(Args.Values[0]) as TStream, Args.Values[1]);
end;

{ function StringLoadFromStream(Stream: TStream): string; }
procedure RAI2_StringLoadFromStream(var Value: Variant; Args: TArgs);
begin
  Value := StringLoadFromStream(V2O(Args.Values[0]) as TStream);
end;

{ procedure IntSaveToStream(Stream: TStream; int: integer); }
procedure RAI2_IntSaveToStream(var Value: Variant; Args: TArgs);
begin
  IntSaveToStream(V2O(Args.Values[0]) as TStream, Args.Values[1]);
end;

{ function IntLoadFromStream(Stream: TStream): integer; }
procedure RAI2_IntLoadFromStream(var Value: Variant; Args: TArgs);
begin
  Value := IntLoadFromStream(V2O(Args.Values[0]) as TStream);
end;

{ function WordLoadFromStream(Stream: TStream): Word; }
procedure RAI2_WordLoadFromStream(var Value: Variant; Args: TArgs);
begin
  Value := WordLoadFromStream(V2O(Args.Values[0]) as TStream);
end;

{ procedure WordSaveToStream(Stream: TStream; int: Word); }
procedure RAI2_WordSaveToStream(var Value: Variant; Args: TArgs);
begin
  WordSaveToStream(V2O(Args.Values[0]) as TStream, Args.Values[1]);
end;

{ function LongLoadFromStream(Stream: TStream): Longint; }
procedure RAI2_LongLoadFromStream(var Value: Variant; Args: TArgs);
begin
  Value := LongLoadFromStream(V2O(Args.Values[0]) as TStream);
end;

{ procedure LongSaveToStream(Stream: TStream; int: Longint); }
procedure RAI2_LongSaveToStream(var Value: Variant; Args: TArgs);
begin
  LongSaveToStream(V2O(Args.Values[0]) as TStream, Args.Values[1]);
end;

{ function ExtendedLoadFromStream(Stream: TStream): Extended; }
procedure RAI2_ExtendedLoadFromStream(var Value: Variant; Args: TArgs);
begin
  Value := ExtendedLoadFromStream(V2O(Args.Values[0]) as TStream);
end;

{ procedure ExtendedSaveToStream(Stream: TStream; Ext: Extended); }
procedure RAI2_ExtendedSaveToStream(var Value: Variant; Args: TArgs);
begin
  ExtendedSaveToStream(V2O(Args.Values[0]) as TStream, Args.Values[1]);
end;

{ procedure BoolSaveToStream(Stream: TStream; bool: boolean); }
procedure RAI2_BoolSaveToStream(var Value: Variant; Args: TArgs);
begin
  BoolSaveToStream(V2O(Args.Values[0]) as TStream, Args.Values[1]);
end;

{ function BoolLoadFromStream(Stream: TStream): boolean; }
procedure RAI2_BoolLoadFromStream(var Value: Variant; Args: TArgs);
begin
  Value := BoolLoadFromStream(V2O(Args.Values[0]) as TStream);
end;

{ procedure FontSaveToStream(Stream: TStream; Font: TFont); }
procedure RAI2_FontSaveToStream(var Value: Variant; Args: TArgs);
begin
  FontSaveToStream(V2O(Args.Values[0]) as TStream, V2O(Args.Values[1]) as TFont);
end;

{ procedure FontLoadFromStream(Stream: TStream; Font: TFont); }
procedure RAI2_FontLoadFromStream(var Value: Variant; Args: TArgs);
begin
  FontLoadFromStream(V2O(Args.Values[0]) as TStream, V2O(Args.Values[1]) as TFont);
end;

{ procedure BrushSaveToStream(Stream: TStream; Brush: TBrush); }
procedure RAI2_BrushSaveToStream(var Value: Variant; Args: TArgs);
begin
  BrushSaveToStream(V2O(Args.Values[0]) as TStream, V2O(Args.Values[1]) as TBrush);
end;

{ procedure BrushLoadFromStream(Stream: TStream; Brush: TBrush); }
procedure RAI2_BrushLoadFromStream(var Value: Variant; Args: TArgs);
begin
  BrushLoadFromStream(V2O(Args.Values[0]) as TStream, V2O(Args.Values[1]) as TBrush);
end;

{ function StringLoadFromStreamDef(Stream: TStream; Def: string): string; }
procedure RAI2_StringLoadFromStreamDef(var Value: Variant; Args: TArgs);
begin
  Value := StringLoadFromStreamDef(V2O(Args.Values[0]) as TStream, Args.Values[1]);
end;

{ function IntLoadFromStreamDef(Stream: TStream; Def: integer): integer; }
procedure RAI2_IntLoadFromStreamDef(var Value: Variant; Args: TArgs);
begin
  Value := IntLoadFromStreamDef(V2O(Args.Values[0]) as TStream, Args.Values[1]);
end;

{ function BoolLoadFromStreamDef(Stream: TStream; Def: boolean): boolean; }
procedure RAI2_BoolLoadFromStreamDef(var Value: Variant; Args: TArgs);
begin
  Value := BoolLoadFromStreamDef(V2O(Args.Values[0]) as TStream, Args.Values[1]);
end;


procedure RegisterRAI2Adapter(RAI2Adapter: TRAI2Adapter);
begin
  with RAI2Adapter do
  begin
    AddFun('RAStream', 'TextSaveToStream', RAI2_TextSaveToStream, 2, [varObject, varString], varEmpty);
    AddFun('RAStream', 'TextLoadFromStream', RAI2_TextLoadFromStream, 1, [varObject], varEmpty);
    AddFun('RAStream', 'StringSaveToStream', RAI2_StringSaveToStream, 2, [varObject, varString], varEmpty);
    AddFun('RAStream', 'StringLoadFromStream', RAI2_StringLoadFromStream, 1, [varObject], varEmpty);
    AddFun('RAStream', 'IntSaveToStream', RAI2_IntSaveToStream, 2, [varObject, varInteger], varEmpty);
    AddFun('RAStream', 'IntLoadFromStream', RAI2_IntLoadFromStream, 1, [varObject], varEmpty);
    AddFun('RAStream', 'WordLoadFromStream', RAI2_WordLoadFromStream, 1, [varObject], varEmpty);
    AddFun('RAStream', 'WordSaveToStream', RAI2_WordSaveToStream, 2, [varObject, varSmallint], varEmpty);
    AddFun('RAStream', 'LongLoadFromStream', RAI2_LongLoadFromStream, 1, [varObject], varEmpty);
    AddFun('RAStream', 'LongSaveToStream', RAI2_LongSaveToStream, 2, [varObject, varEmpty], varEmpty);
    AddFun('RAStream', 'ExtendedLoadFromStream', RAI2_ExtendedLoadFromStream, 1, [varObject], varEmpty);
    AddFun('RAStream', 'ExtendedSaveToStream', RAI2_ExtendedSaveToStream, 2, [varObject, varEmpty], varEmpty);
    AddFun('RAStream', 'BoolSaveToStream', RAI2_BoolSaveToStream, 2, [varObject, varBoolean], varEmpty);
    AddFun('RAStream', 'BoolLoadFromStream', RAI2_BoolLoadFromStream, 1, [varObject], varEmpty);
    AddFun('RAStream', 'FontSaveToStream', RAI2_FontSaveToStream, 2, [varObject, varObject], varEmpty);
    AddFun('RAStream', 'FontLoadFromStream', RAI2_FontLoadFromStream, 2, [varObject, varObject], varEmpty);
    AddFun('RAStream', 'BrushSaveToStream', RAI2_BrushSaveToStream, 2, [varObject, varObject], varEmpty);
    AddFun('RAStream', 'BrushLoadFromStream', RAI2_BrushLoadFromStream, 2, [varObject, varObject], varEmpty);
    AddFun('RAStream', 'StringLoadFromStreamDef', RAI2_StringLoadFromStreamDef, 2, [varObject, varString], varEmpty);
    AddFun('RAStream', 'IntLoadFromStreamDef', RAI2_IntLoadFromStreamDef, 2, [varObject, varInteger], varEmpty);
    AddFun('RAStream', 'BoolLoadFromStreamDef', RAI2_BoolLoadFromStreamDef, 2, [varObject, varBoolean], varEmpty);
  end;    { with }
end;    { RegisterRAI2Adapter }

end.
